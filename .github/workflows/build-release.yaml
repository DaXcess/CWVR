name: Build Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          filter: tree:0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.203"

      - name: Set up variables
        id: vars
        run: |
          # Extract package version from project
          echo "version=$(grep -oP '<Version>\K[^<]+' CWVR.csproj)" >> "$GITHUB_OUTPUT"

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build NuGet package
        run: dotnet pack -p:Version='${{ steps.vars.outputs.version }}' -c Release
        
      - name: Upload NuGet package
        if: github.event_name == 'push'
        run: dotnet nuget push bin/Release/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://nuget.daxcess.io/v3/index.json

      - name: Build CWVR
        run: dotnet build -c Release

      - name: Configure GPG Key
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Prepare and bundle package
        run: |
          # Set up template
          mkdir package
          git --work-tree=./package checkout origin/thunderstore ./

          # Copy and sign release binaries
          cp bin/Release/netstandard2.1/CWVR.dll ./package/BepInEx/plugins/CWVR/
          cp bin/Release/netstandard2.1/CWVR.Preload.dll ./package/BepInEx/patchers/CWVR/
          gpg --output ./package/BepInEx/plugins/CWVR/CWVR.dll.sig --detach-sig ./package/BepInEx/plugins/CWVR/CWVR.dll
          gpg --output ./package/BepInEx/patchers/CWVR/CWVR.Preload.dll.sig --detach-sig ./package/BepInEx/patchers/CWVR/CWVR.Preload.dll

          # Move assets
          mv ./package/contentwarningvr ./package/BepInEx/plugins/CWVR/contentwarningvr

          # Copy docs and license
          cp CHANGELOG.md ./package/CHANGELOG.md
          cp Docs/Thunderstore/README.md ./package/README.md
          cp LICENSE ./package/LICENSE

          # Update Thunderstore manifest
          jq '.version_number = "${{ steps.vars.outputs.version }}"' ./package/manifest.json > ./package/manifest_new.json
          mv ./package/manifest_new.json ./package/manifest.json
          
          # Create Workshop package
          mkdir ./package-workshop
          cp -r ./package/BepInEx/plugins/CWVR/* ./package-workshop/
          cp ./package/BepInEx/patchers/CWVR/CWVR.Preload.dll ./package-workshop/CWVR.preload.dll
          cp ./package/BepInEx/patchers/CWVR/CWVR.Preload.dll.sig ./package-workshop/CWVR.preload.dll.sig
          cp -r ./package/BepInEx/patchers/CWVR/RuntimeDeps ./package-workshop
          cp ./package/icon.png ./package-workshop/preview.png
          cp ./package/README.md ./package-workshop/
          cp ./package/LICENSE ./package-workshop/

      - name: Upload build artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: CWVR-${{ steps.vars.outputs.version }}-BepInEx
          path: ./package

      - name: Upload Steam Workshop build
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: CWVR-${{ steps.vars.outputs.version }}-Workshop
          path: ./package-workshop